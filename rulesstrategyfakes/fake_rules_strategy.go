// Code generated by counterfeiter. DO NOT EDIT.
package rulesstrategyfakes

import (
	"io"
	"sync"

	"github.com/chadius/terosgamerules"
)

type FakeRulesStrategy struct {
	ReplayBattleScriptStub        func(io.Reader, io.Reader, io.Reader, io.Writer) error
	replayBattleScriptMutex       sync.RWMutex
	replayBattleScriptArgsForCall []struct {
		arg1 io.Reader
		arg2 io.Reader
		arg3 io.Reader
		arg4 io.Writer
	}
	replayBattleScriptReturns struct {
		result1 error
	}
	replayBattleScriptReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRulesStrategy) ReplayBattleScript(arg1 io.Reader, arg2 io.Reader, arg3 io.Reader, arg4 io.Writer) error {
	fake.replayBattleScriptMutex.Lock()
	ret, specificReturn := fake.replayBattleScriptReturnsOnCall[len(fake.replayBattleScriptArgsForCall)]
	fake.replayBattleScriptArgsForCall = append(fake.replayBattleScriptArgsForCall, struct {
		arg1 io.Reader
		arg2 io.Reader
		arg3 io.Reader
		arg4 io.Writer
	}{arg1, arg2, arg3, arg4})
	stub := fake.ReplayBattleScriptStub
	fakeReturns := fake.replayBattleScriptReturns
	fake.recordInvocation("ReplayBattleScript", []interface{}{arg1, arg2, arg3, arg4})
	fake.replayBattleScriptMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRulesStrategy) ReplayBattleScriptCallCount() int {
	fake.replayBattleScriptMutex.RLock()
	defer fake.replayBattleScriptMutex.RUnlock()
	return len(fake.replayBattleScriptArgsForCall)
}

func (fake *FakeRulesStrategy) ReplayBattleScriptCalls(stub func(io.Reader, io.Reader, io.Reader, io.Writer) error) {
	fake.replayBattleScriptMutex.Lock()
	defer fake.replayBattleScriptMutex.Unlock()
	fake.ReplayBattleScriptStub = stub
}

func (fake *FakeRulesStrategy) ReplayBattleScriptArgsForCall(i int) (io.Reader, io.Reader, io.Reader, io.Writer) {
	fake.replayBattleScriptMutex.RLock()
	defer fake.replayBattleScriptMutex.RUnlock()
	argsForCall := fake.replayBattleScriptArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRulesStrategy) ReplayBattleScriptReturns(result1 error) {
	fake.replayBattleScriptMutex.Lock()
	defer fake.replayBattleScriptMutex.Unlock()
	fake.ReplayBattleScriptStub = nil
	fake.replayBattleScriptReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRulesStrategy) ReplayBattleScriptReturnsOnCall(i int, result1 error) {
	fake.replayBattleScriptMutex.Lock()
	defer fake.replayBattleScriptMutex.Unlock()
	fake.ReplayBattleScriptStub = nil
	if fake.replayBattleScriptReturnsOnCall == nil {
		fake.replayBattleScriptReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.replayBattleScriptReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRulesStrategy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replayBattleScriptMutex.RLock()
	defer fake.replayBattleScriptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRulesStrategy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ terosgamerules.RulesStrategy = new(FakeRulesStrategy)
